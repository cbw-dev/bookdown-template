[["index.html", "[Name of Workshop][Year] Welcome", " [Name of Workshop][Year] Instructors: [list instructor names here] [Insert dates of the workshop] Welcome Welcome to CBW’s [workshop name, year] Workshop! Put some introductory content here. (ex. links to bioinformatics.ca, general info) "],["course-schedule.html", "Course Schedule Pre-workshop Materials Computing Setup &amp; Downloads Meet Your Faculty Class Photo", " Course Schedule Copy paste a table into https://www.tablesgenerator.com/markdown_tables (select convert to markdown) to create a table in markdown. Pre-workshop Materials Click here for your prework! Computing Setup &amp; Downloads Insert downloads (ex. datasets) or other tech instructions here (ex. AWS Instructions) Meet Your Faculty Here’s your team! Instructor, TA, … Job Title Company/University/… Location — contact information [insert description of the person] Michelle Brazas, PhD Scientific Director Canadian Bioinformatics Workshops (CBW) Toronto, ON, CA — support@bioinformatics.ca Dr. Michelle Brazas is the Associate Director for Adaptive Oncology at the Ontario Institute for Cancer Research (OICR), and acting Scientific Director at Bioinformatics.ca. Previously, Dr. Brazas was the Program Manager for Bioinformatics.ca and a faculty member in Biotechnology at BCIT. Michelle co-founded and runs the Toronto Bioinformatics User Group (TorBUG) now in its 11th season, and plays an active role in the International Society of Computational Biology where she sits on the Board of Directors and Executive Board. Nia Hughes (she/her) Program Manager, Bioinformatics.ca Ontario Institute for Cancer Research Toronto, ON, Canada — nia.hughes@oicr.on.ca Nia is the Program Manager for Bioinformatics.ca, where she coordinates the Canadian Bioinformatics Workshop Series. Prior to starting at OICR, she completed her M.Sc. in Bioinformatics from the University of Guelph in 2020 before working there as a bioinformatician studying epigenetic and transcriptomic patterns across maize varieties. Class Photo &lt;- Replace the file address to your actual class photo file location "],["module-1.html", "Module 1 Lecture Lab", " Module 1 Welcome to module 1! Lecture Here is an example of a pdf embedded:   Here is an example of a YouTube video embedded: ^ HEIGHT HAS A BUG Downloads [insert your downloads for this module here (ex. datasets)] Lab [Your lab here] # Your R code here # For example: x &lt;- 42 x ## [1] 42 # Your python code here # For example: print(&quot;hello world&quot;) ## hello world # Your bash code here # For example: pwd ## /Users/jqiu/Documents/CBWgithub/cbw-dev-templates-docs/bookdown-template Try running these code “chunks” by pressing the green (left-pointing) triangle next to your code chunks. You will see the code run in the console and the output provided below the code chunk. The output of the code will also be produced under the code chunk on your website page. "],["module-2.html", "Module 2 Lecture Lab", " Module 2 Lecture Lab "],["render-code.html", "How to Render/Compile Code Rendering Code Rendering Code with Highlights for Specific Languages Rendering and Compiling Code Code Chunk Options Code Chunks for Code-Generated Figures and Tables", " How to Render/Compile Code There are many ways to render and compile code using Bookdown! Here are most of the “language engines” (programming languages) available to render, run and compile in Bookdown! names(knitr::knit_engines$get()) ## [1] &quot;awk&quot; &quot;bash&quot; &quot;coffee&quot; &quot;gawk&quot; &quot;groovy&quot; ## [6] &quot;haskell&quot; &quot;lein&quot; &quot;mysql&quot; &quot;node&quot; &quot;octave&quot; ## [11] &quot;perl&quot; &quot;php&quot; &quot;psql&quot; &quot;Rscript&quot; &quot;ruby&quot; ## [16] &quot;sas&quot; &quot;scala&quot; &quot;sed&quot; &quot;sh&quot; &quot;stata&quot; ## [21] &quot;zsh&quot; &quot;asis&quot; &quot;asy&quot; &quot;block&quot; &quot;block2&quot; ## [26] &quot;bslib&quot; &quot;c&quot; &quot;cat&quot; &quot;cc&quot; &quot;comment&quot; ## [31] &quot;css&quot; &quot;ditaa&quot; &quot;dot&quot; &quot;embed&quot; &quot;eviews&quot; ## [36] &quot;exec&quot; &quot;fortran&quot; &quot;fortran95&quot; &quot;go&quot; &quot;highlight&quot; ## [41] &quot;js&quot; &quot;julia&quot; &quot;python&quot; &quot;R&quot; &quot;Rcpp&quot; ## [46] &quot;sass&quot; &quot;scss&quot; &quot;sql&quot; &quot;stan&quot; &quot;targets&quot; ## [51] &quot;tikz&quot; &quot;verbatim&quot; &quot;theorem&quot; &quot;lemma&quot; &quot;corollary&quot; ## [56] &quot;proposition&quot; &quot;conjecture&quot; &quot;definition&quot; &quot;example&quot; &quot;exercise&quot; ## [61] &quot;hypothesis&quot; &quot;proof&quot; &quot;remark&quot; &quot;solution&quot; Rendering Code Just rendering code refers to Bookdown formatting code so that our users can view it. The code does not run or compile. This is very similar to what is shown in 020-module-1.Rmd of the bookdown template. An example is shown below. ``` insert code here ``` which appears as insert code here These are called “code chunks”. Rendering Code with Highlights for Specific Languages Bookdown also highlights (specific to the language) the outputted code for the ease of understanding. To do so, add the name of the language (of the many shown above) after the first 3 ` symbols. Note that the language is not case sensitive (so both “r” and “R” would render the same below). For example: ```r x &lt;- 42 x ``` renders into: x &lt;- 42 x Notice that since &lt;- is how to assign values to variables in R, it is highlighted. If we were to replace “r” with a different language, this may not be highlighted (depending if “&lt;-” is a relevant symbol in that language.) Rendering and Compiling Code To have the code actually compile, we need to put “{” and “}” brackets around the language, which we still put after the first 3 ` symbols. For example: ```{r} x &lt;- 42 x htmltools::HTML(&#39;&lt;b&gt;LEFT`RIGHT&lt;/b&gt;&#39;) htmltools::HTML(&#39;&lt;b&gt;LEFT`RIGHT&lt;/b&gt;&#39;) htmltools::HTML(&#39;&lt;b&gt;LEFT`RIGHT&lt;/b&gt;&#39;) ``` renders and compiles into: x &lt;- 42 x ## [1] 42 The second bar you see is the output of R command! You can run these “code chunks” without previewing or building the book! To the right of your code chunk, there are 3 symbols (as seen below). The gear symbol leads to more chunk options click on it to see more options. The down arrow symbol runs all previous chunks and the current chunk. This is helpful if previous chunks define a variable that you will need in your current chunk. Note: Hence, we can use variables from previous chunks! The right-pointing arrow symbol runs the current code chunk. A rectangular box will appear below your code chunk, with the output of your code. Additionally, notice that in your bottom left window, any code you run also runs in your console. Both of these ways of checking your code happens for all languages! If you are previewing your book, you must re-preview it, since running the code becomes the new action for your console, instead of previewing the book. Note! If you want to run a certain language, you must have the language installed! R and python are already setup for you. (Python relies on the RStudio interface option, reticulate - you can reconfigure this if you’d like.) You may have to configure new languages so that they can run in RStudio, but generally, they should be able to run automatically. Exiting the Console If you’re running R, you don’t have to exit the console (we already work in the R console when using Bookdown). However, if you’re running a different language (for example, python), you will remain in the Python console, and must exit it to run Bookdown commands. You can look online for different ways to exit certain consoles, but generally running “quit” will return you to the R console. Now we know how to both render (just show) and compile (see the output) of our code! Code Chunk Options Bookdown has options that we can include, to help with certain options for our code to appear and what it may produce. Generally, the typical structure of adding code chunk options is shown below. ```{r, option=VALUE, option=VALUE, ...} code ``` Some common code chunk options are: echo echo=TRUE shows the code output (by default, it is on). echo=FALSE hides the code output. eval eval=TRUE runs the code (default). eval=FALSE skips the chunk and does not execute the code. results results='markup' runs the code (default). results='asis' leaves the output with no additional formatting. results='hide' does not show the output. include include=TRUE includes both the code and the output on your website (default). include=FALSE excludes both the code and the output on your website. Click here to find more code chunk options! Code Chunks for Code-Generated Figures and Tables We can use code chunks to help specify certain ways for code-generated figures and tables to appear, and how to link to them! Generally, this will look like: ```{r reference-name, option=VALUE, option=VALUE, ...} code that generates an image/table ``` Then, we can refer to the figure or table generated by the code in this chunk by using \\@ref(fig:reference-name) or \\@ref(tab:chunk-label) For example, an R-generated image can be made using a similar code chunk to the one shown below: See Figure \\@ref(fig:nice-fig). ```{r nice-fig, fig.cap=&#39;Here is a nice figure!&#39;, out.width=&#39;80%&#39;, fig.asp=.75, fig.align=&#39;center&#39;, fig.alt=&#39;Plot with connected points showing that vapor pressure of mercury increases exponentially as temperature increases.&#39;} par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) ``` This renders into: See Figure 1. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 1: Here is a nice figure! Here is an example of a table generated by R from a code chunk: Don&#39;t miss Table \\@ref(tab:nice-tab). ```{r nice-tab, tidy=FALSE} knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) ``` This renders into: Don’t miss Table 1. knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 1: Here is a nice table! temperature pressure 0 0.0002 20 0.0012 40 0.0060 60 0.0300 80 0.0900 100 0.2700 120 0.7500 140 1.8500 160 4.2000 180 8.8000 You can find more inforamtion on figures and tables in Bookdown here! "],["404.html", "Error 404: This page does not exist.", " Error 404: This page does not exist. This page does not exist anymore! Try going back to the workshop homepage or the bioinformatics.ca homepage. You must update these pages for new workshops. "]]
